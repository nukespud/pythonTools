# matutils.py

def uenrichment(enr):
# Return a list of 4 U isotopes whose atom fractions are base on the U235 enrichment
# Brian Ade, 8.15.2011
# 1. S.M. Bowman, O.W. Hermann, and M.C. Brady, "Sequoyah Unit 2 Cycle 3." Scale-4
#    Analysis of Pressurized Water Reactor Critical Configurations. ORNL/TM- 12294/V2.
#    Oak Ridge, Tennessee: Oak Ridge National Laboratory, 1995.
  f234 = 0.0089
  f236 = 0.0046
  u_isos = [['92234', enr*f234], ['92235', enr], ['92236', enr*f236], ['92238', 100.0-enr*f234-enr-enr*f236]]
  return u_isos

def uo2stdcmp(name,den,vf,tmp,iza):
  matstring = 'uo2   ${0} den={1} {2}  {3}'.format(name,den,vf,tmp)
  for zaidfrac in iza: matstring += "\n {0:>35}  {1:>10.5f} ".format(zaidfrac[0],zaidfrac[1])
  matstring += '  end \n'
  return matstring

def uo2gdstdcmp(name,den,vf,tmp,iza,gd):
  matstring = 'uo2   ${0} den={1} {2}  {3}'.format(name,den,vf*(1.0-gd/100.0),tmp)
  for zaidfrac in iza: matstring += "\n {0:>35}  {1:>10.5f} ".format(zaidfrac[0],zaidfrac[1])
  matstring += '  end \n'
  matstring += '  gd2o3   ${0} den={1} {2}  {3}'.format(name,den,vf*(gd/100.0),tmp)
  matstring += '  end \n'
  return matstring

#  Added by Joshua Peterson
def inert_rdstdcmp(name,tmp,den,per_zirc2):
  matstring='zirc2  ${0} den={1} {2}  {3} end\n'.format(name,den,per_zirc2,tmp)
  matstring +='  inconel ${0}   den={1}  {2}  {3} end \n'.format(name,den,1.0-per_zirc2,tmp)
#  print matstring
  return matstring

def inert_rd_ss_stdcmp(name,tmp,den,per_ss):
  matstring='ss304  ${0} den={1} {2}  {3} end\n'.format(name,den,per_ss,tmp)
  matstring +='  inconel ${0}   den={1}  {2}  {3} end \n'.format(name,den,1.0-per_ss,tmp)
  #print matstring
  return matstring 
 
def ss2stdcmp(name,den=6.56,vf=1.0,tmp=500):
  matstring = 'ss304 ${0} den={1} {2}  {3}  end \n'.format(name,den,vf,tmp)
  print matstring
  return matstring



#  End of addition
def zirc2stdcmp(name,den=6.56,vf=1.0,tmp=500):
  matstring = 'zirc2 ${0} den={1} {2}  {3}  end \n'.format(name,den,vf,tmp)
  return matstring
  
def zirc4stdcmp(name,den=6.56,vf=1.0,tmp=500):
  matstring = 'zirc4 ${0} den={1} {2}  {3}  end \n'.format(name,den,vf,tmp)
  return matstring

def h2ostdcmp(name="$mod",den=1.0,vf=1.0,tmp=500):
  matstring = 'h2o ${0} den={1:<7.5f} {2}  {3}  end \n'.format(name,den,vf,tmp)
  return matstring

def hestdcmp(name="$gap",den=1.0,vf=1.0,tmp=500):
  matstring = 'he ${0} den={1:<7.5f} {2}  {3}  end \n'.format(name,den,vf,tmp)
  return matstring

def b4cstdcmp(name,den=1.0,vf=1.0,tmp=500):
  matstring = 'b4c ${0} den={1:<7.5f} {2}  {3}  end \n'.format(name,den,vf,tmp)
  return matstring


def linearinterpolate(x1,x2,y1,y2,xa): return y1 + (y2-y1)/(x2-x1)*(xa-x1)

def h2orho(temp):
  i=0
  h2osteamtable=[[2.73160000E+02, 6.11300000E-01, 1.00000000E+00, 4.85107209E-06],
  [2.78150000E+02, 8.72100000E-01, 1.00000000E+00, 6.79717238E-06],
  [2.83150000E+02, 1.22760000E+00, 1.00000000E+00, 9.40026321E-06],
  [2.88150000E+02, 1.70510000E+00, 9.99000999E-01, 1.28320287E-05],
  [2.93150000E+02, 2.33900000E+00, 9.98003992E-01, 1.73040318E-05],
  [2.98150000E+02, 3.16900000E+00, 9.97008973E-01, 2.30627306E-05],
  [3.03150000E+02, 4.24600000E+00, 9.96015936E-01, 3.04043782E-05],
  [3.08150000E+02, 5.62800000E+00, 9.94035785E-01, 3.96510706E-05],
  [3.13150000E+02, 7.38400000E+00, 9.92063492E-01, 5.12295082E-05],
  [3.18150000E+02, 9.59300000E+00, 9.90099010E-01, 6.55307995E-05],
  [3.23150000E+02, 1.23490000E+01, 9.88142292E-01, 8.31255195E-05],
  [3.28150000E+02, 1.57580000E+01, 9.85221675E-01, 1.04515050E-04],
  [3.33150000E+02, 1.99400000E+01, 9.83284169E-01, 1.30361100E-04],
  [3.38150000E+02, 2.50300000E+01, 9.80392157E-01, 1.61368404E-04],
  [3.43150000E+02, 3.11900000E+01, 9.77517107E-01, 1.98333994E-04],
  [3.48150000E+02, 3.85800000E+01, 9.74658869E-01, 2.42072137E-04],
  [3.53150000E+02, 4.73900000E+01, 9.71817298E-01, 2.93513355E-04],
  [3.58150000E+02, 5.78300000E+01, 9.68054211E-01, 3.53606789E-04],
  [3.63150000E+02, 7.01400000E+01, 9.65250965E-01, 4.23549343E-04],
  [3.68150000E+02, 8.45500000E+01, 9.61538462E-01, 5.04540868E-04],
  [3.73150000E+02, 1.01350000E-01, 9.57854406E-01, 5.97764361E-04],
  [3.78150000E+02, 1.20820000E-01, 9.54198473E-01, 7.04523038E-04],
  [3.83150000E+02, 1.43270000E-01, 9.50570342E-01, 8.26309701E-04],
  [3.88150000E+02, 1.69060000E-01, 9.46969697E-01, 9.64692263E-04],
  [3.93150000E+02, 1.98530000E-01, 9.43396226E-01, 1.12120193E-03],
  [3.98150000E+02, 2.32100000E-01, 9.38967136E-01, 1.29769011E-03],
  [4.03150000E+02, 2.70100000E-01, 9.34579439E-01, 1.49588631E-03],
  [4.08150000E+02, 3.13000000E-01, 9.30232558E-01, 1.71762281E-03],
  [4.13150000E+02, 3.61300000E-01, 9.25925926E-01, 1.96502260E-03],
  [4.18150000E+02, 4.15400000E-01, 9.21658986E-01, 2.24064531E-03],
  [4.23150000E+02, 4.75800000E-01, 9.16590284E-01, 2.54582485E-03],
  [4.28150000E+02, 5.43100000E-01, 9.12408759E-01, 2.88350634E-03],
  [4.33150000E+02, 6.17800000E-01, 9.07441016E-01, 3.25626832E-03],
  [4.38150000E+02, 7.00500000E-01, 9.02527076E-01, 3.66703337E-03],
  [4.43150000E+02, 7.91700000E-01, 8.97666068E-01, 4.11861614E-03],
  [4.48150000E+02, 8.92000000E-01, 8.92060660E-01, 4.61254613E-03],
  [4.53150000E+02, 1.00210000E+00, 8.87311446E-01, 5.15331100E-03],
  [4.58150000E+02, 1.12270000E+00, 8.81834215E-01, 5.74415532E-03],
  [4.63150000E+02, 1.25440000E+00, 8.76424189E-01, 6.38814361E-03],
  [4.68150000E+02, 1.39780000E+00, 8.70322019E-01, 7.08968451E-03],
  [4.73150000E+02, 1.55380000E+00, 8.64304235E-01, 7.85175879E-03],
  [4.78150000E+02, 1.72300000E+00, 8.59106529E-01, 8.67980210E-03],
  [4.83150000E+02, 1.90620000E+00, 8.52514919E-01, 9.57762666E-03],
  [4.88150000E+02, 2.10400000E+00, 8.46740051E-01, 1.05496360E-02],
  [4.93150000E+02, 2.31800000E+00, 8.40336134E-01, 1.16022740E-02],
  [4.98150000E+02, 2.54800000E+00, 8.34028357E-01, 1.27404765E-02],
  [5.03150000E+02, 2.79500000E+00, 8.27129859E-01, 1.39703828E-02],
  [5.08150000E+02, 3.06000000E+00, 8.20344545E-01, 1.52975371E-02],
  [5.13150000E+02, 3.34400000E+00, 8.13669650E-01, 1.67336011E-02],
  [5.18150000E+02, 3.64800000E+00, 8.06451613E-01, 1.82781941E-02],
  [5.23150000E+02, 3.97300000E+00, 7.99360512E-01, 1.99481348E-02],
  [5.28150000E+02, 4.31900000E+00, 7.91765637E-01, 2.17485863E-02],
  [5.33150000E+02, 4.68800000E+00, 7.83699060E-01, 2.36910685E-02],
  [5.38150000E+02, 5.08100000E+00, 7.75795190E-01, 2.57931390E-02],
  [5.43150000E+02, 5.49900000E+00, 7.68049155E-01, 2.80583614E-02],
  [5.48150000E+02, 5.94200000E+00, 7.59301443E-01, 3.04971028E-02],
  [5.53150000E+02, 6.41200000E+00, 7.50750751E-01, 3.31455088E-02],
  [5.58150000E+02, 6.90900000E+00, 7.41839763E-01, 3.60100828E-02],
  [5.63150000E+02, 7.43600000E+00, 7.32064422E-01, 3.91083301E-02],
  [5.68150000E+02, 7.99300000E+00, 7.22543353E-01, 4.24808836E-02],
  [5.73150000E+02, 8.58100000E+00, 7.12250712E-01, 4.61467467E-02],
  [5.78150000E+02, 9.20200000E+00, 7.01754386E-01, 5.01303389E-02],
  [5.83150000E+02, 9.85600000E+00, 6.91085003E-01, 5.44959128E-02],
  [5.88150000E+02, 1.05470000E+01, 6.79347826E-01, 5.92873659E-02],
  [5.93150000E+02, 1.12740000E+01, 6.67111408E-01, 6.45661157E-02],
  [6.03150000E+02, 1.28450000E+01, 6.40614990E-01, 7.69467528E-02],
  [6.13150000E+02, 1.45860000E+01, 6.10500611E-01, 9.26183199E-02],
  [6.23150000E+02, 1.65130000E+01, 5.74712644E-01, 1.13468739E-01],
  [6.33150000E+02, 1.86510000E+01, 5.28262018E-01, 1.43988481E-01],
  [6.43150000E+02, 2.10300000E+01, 4.51875282E-01, 2.03045685E-01],
  [6.47290000E+02, 2.20900000E+01, 3.16957211E-01, 3.16957211E-01]]
  while temp > h2osteamtable[i][0]: i += 1
  rhof = linearinterpolate(h2osteamtable[i-1][0],h2osteamtable[i][0],h2osteamtable[i-1][2],h2osteamtable[i][2],temp)
  rhog = linearinterpolate(h2osteamtable[i-1][0],h2osteamtable[i][0],h2osteamtable[i-1][3],h2osteamtable[i][3],temp)
  return rhof,rhog

def twophaserho(vf,tmod):
  rhog, rhof = h2orho(tmod)
  return (rhog*(1.0-vf) + rhof*vf)

def onefuelname(pin):
  if len(pin) == 1:
    name = "1f{0}    ".format(int(pin[0]*100))
  else:
    name = "1f{0}gd{1}".format(int(pin[0]*100), int(pin[1]*10))
  return name

def switchmats(dict,mats):
  for key in dict:
    for i in range(0,len(dict[key][1])):
      dict[key][1][i] = mats[dict[key][1][i]]['matnums'][0]
  return dict


